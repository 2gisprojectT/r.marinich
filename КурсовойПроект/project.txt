Pairwise Testing:
1.
	Парное тестирование - такой метод подготовки данных для тестирования модели системы или продукта, что в результате которого для каждой пары параметров генерируется всевозможные комбинации. В итоге получаем таблицу, в которой в любых двух столбцах имеются всевозможные комбинации этих параметров. 

	Идейно самый общий (N-wise Testing?) метод основан на предположении о наибольшей значимости именно N-комбинаций параметров для тестирования. Поэтому мы проверяем на всевозможные дефекты только комбинации N параметров. В случае N=2 (Pairwise Testing) мы проверяем только пары, а те баги, которые могут проявится в более сложных комбинациях мы считаем маловероятными или просто труднонаходимые в силу наших ограниченных возможностей. Это позволит обнаружить самые легковоспроиводимые ошибки, на которые могут наткнуться пользователи. Приведем пример. Пусть у нас есть 6 параметров по 10 значений в каждом. Если ошибка кроется в сложной комбинации 6 параметров, то наткнется на нее 1 человек, если ли же есть комбанациях из 2 параметров -- 10^4 человек. Таким образом, с помощью Pairwise Testing мы обнаруживаем самые критичные недоработки.
	Приведем еше пример. Определим тройку параметров (OS, браузер, Language). В случае полного перебора имеем 2^3=8, а используя Pairwise Testing получаем всего лишь 4:
	windows		opera	RU
	windows		FF		EN
	Linux		opera	EN
	Linux		FF		RU
	Можно проверить, что в каждой паре столбцов параметры принимают всевозможные значения. 

	Подробнее про фактическую реализацию: несмотря на то что все же метод генерирует подмножество всевозможных комбинаций параметров, генерировать "в лоб" сложновато. Поэтому проще сначала сгенерировать только пары для каждой позиции выборки, а потом произветси связывание по ключевым позициям. Например, пусть выборка имеет вид X = (X1, X2, X3). На первом этапе построение нужного нам множества следует построить всевозможные комбинации позиций (X1, X2), (X2, X3), а далее просто склеить их по поизиции(X1, X2 или X3), имеющий максимальное количество значений. Если комбинаций больше чем 2, то клеить несколько раз.
	Пример:
	Говоря о количестве комбинаций, можно рассуждать примерно как выше: пусть также имеется выборка X = (X1(n1), X2(n2), X3(n3)), где ni - количество значений в i-ой позиции. Тогда общее число комбинаций Sum[max[ni]*ni, {i=1..N}]/N.
	Рассмотрим пример:

	Метод подходит для задач в которых необходимо или желательно сократить общее количество тестов. Например, если провести полное стестирование невозможно или попросту бессымсленно для нас. Добавлю еще, что следует использовать если необходимо убедиться в корректной работе именно пар значений выборки, которые связаны между друг другом. Если значения выборки не связаны -- лучше провести отдельно для каждого значения свой тест.

	Метод недостаточно эффективен, если тестируемая нами модель требует перебора всех пар значений параметров со всеми другими парами значений параметров. Или, если точнее, в существующей модели параметры значений каким-то образом связаны друг с другом, что делает полученную выборку конкретных пар без учета других очень узкой. Также из за ограничений выборка может оказатсья попросту некорректной. Поясняя последнее: если мы тестируем на выборках (сайт, браузер, ОС) первую пары значений, то тройка (2gis.ru, Internet Explorer, Linux) явно неосуществима на практике.

Exploratory Testing:
	Это такая технология тестирования, совмещающая одновременное проектирование теста и его исполнение. Данный вид тестирования заранее не определяется в плане тестирования и такие тесты создаются, выполняются и модифицируются динамически, по мере необходимости. То есть, фаткически это означает что тестировщик строит у себя в голове, если можно так сказать, модель ядра приложения. И это позволяет ему менее зависеть от требований и каких-то меняющихся направлений. Например, если у тестировщика появится мысль, что программа как-то неправильно формирует очередь с приоритетом, то какая разница в какой форме и как в будущем будет выглядеть вывод этой очереди?

	На мой взляд, наиболее эффективнее использовать данный вид тестирования для продуктов(моделей): имеющих плавующие требования, в период активного развития программы, при меняющейся цели следующего тестирования, зависящей от предыдущего; Либо для тестировщиков, обладающих обширными знаниями для построения тестов, формируемых на основе поведения тестируемого продукта в процессе проведения тестирования, степени знакомства с приложением, платформой, типами возможных сбоев и дефектов, рисками и т.п.

	Из недостатков можно отметить, что результат зависит от знаний, опыта и навыков тестировщика. Также метод стоит сказать, что метод все же может пропустить некоторые недоработки, потому что не полностью покрывает всевозможные варианты использования продукта.


Тест кейс #1: 
Проверка правильного имени группировки и верной сортировки товаров.

	Предусловия: 
		1) Зайти на сайт dns-shop.ru и перейти в Каталог -> Ноутбуки и планшеты -> Ноутбуки

		2) В выплывающиъ списках "Магазины", "Наличие" и "Вид" выбираем и фиксируем любые значения.

	Шаги:
		1) Выбираем название из выплывающего списка "Группировать"

		2) Выбираем название из выплывающего списка "Соритровать"

		3) Ждем обновления страницы.
		
		4) Проверяем, действительно ли название элементы отсоритрованы в нужном порядке и находятся в нужной группе.

		5) Повторяем действие 1-4, пока не перепробуем все комбаниции пар из списков "Группировать" и "Соритровать".

	Ожидаемый результат:

		На всех шагах тестирования элементы отсоритрованы в нужном порядке и находятся в нужной группе.

Тест кейс #2: 
Проверка типа группы электроприборов и верной сортировки товаров внутри нее.

	Предусловия: 
		1) Зайти на сайт market.yandex.ru и перейти в категорию Бытовая техника -> Мелкая техника для кухни -> Приготовление напитков

	Шаги:
		1) Выбираем пункт из списка "Сортировать"

		2) Выбираем пункт из списка "Тип"

		3) Ждем обновления страницы.
		
		4) Проверяем, действительно ли название элементы отсоритрованы в нужном порядке и электроприборы относятся к выбранному типу

		5) Повторяем действие 1-4, пока не перепробуем все комбаниции пар из списков "Сортировать" и "Тип".

	Ожидаемый результат:

		На всех шагах тестирования элементы отсоритрованы в нужном порядке и являются электроприборами правильного типа.

Тест кейс #3: 
Проверка соответствия запроса и результата поиска.

	Предусловия: 
		1) Зайти на сайт rutor.org

		2) Кликнуть по кнопке "Поиск"

		3)Ввести в форму "Ищем" строку "Мстители"

		4) Параметры сортировки установить по умолчанию.

	Шаги:
		1) Выбираем пункт из списка, который правее после формы с запросом поиска

		2) Выбираем пункт из списка, который еще правее предыдущего списка.

		3) Жмем на кнопку "Поехали".
		
		4) Проверяем, действительно ли результаты поиска содержат строку поиска в нужном месте.

		5) Повторяем действие 1-4, пока не перепробуем все комбаниции пары из списков.

	Ожидаемый результат:

		На всех шагах тестирования элементы содержат строку поиска в нужном месте.